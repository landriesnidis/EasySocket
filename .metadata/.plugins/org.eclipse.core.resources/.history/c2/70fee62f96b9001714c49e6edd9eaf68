package pers.landriesnidis.easysocket_example.server;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.BindException;
import java.net.Socket;
import java.util.UUID;

import pers.landriesnidis.easysocket.server.BaseListener;
import pers.landriesnidis.easysocket.server.BaseServerSocketThread;

public class Example_02_DataFilter {
	public static void main(String[] args) throws BindException {
		new EasyListener(12345).start();
	}
}

class EasyListener extends BaseListener<EasyServerSocketThread>{

	public EasyListener(int port) throws BindException {
		super(port);
	}

	@Override
	protected EasyServerSocketThread onHandOver(Socket socket) {
		return new EasyServerSocketThread(socket);
	}

	@Override
	protected void onStart() {
		System.out.println("服务器已启动！端口号为：" + getLocalPort());
	}

	@Override
	protected void onConnection(Socket socket) {
		System.out.println("服务器已关闭！");
	}
	
}

class EasyServerSocketThread extends BaseServerSocketThread{

	public EasyServerSocketThread(Socket socket) {
		super(socket);
		this.setDataReceptionMode(DATA_RECEPTION_MODE.AUTO);
		
		//添加数据适配器
		//测试字符串：123<String1>456</String1>789<String2>abc</String2>def
		this.addDataFilter(new StringDataAapter("<String1>","</String1>"));
		this.addDataFilter(new StringDataAapter("<String2>","</String2>"));
		this.addDataFilter(new FileDataAapter("."));
	}

	@Override
	public void onReceiveData(String strline) {
		System.out.println("收到数据：" + strline);
	}

	@Override
	public void onConnected() {
		System.out.println("新客户端已连接:" + getRemoteSocketAddress());
	}

	@Override
	public void onClosed() {
		System.out.println("客户端断开连接：" + getRemoteSocketAddress());
	}

	@Override
	public void onReceiveData(byte[] arr, int length) {
		// TODO Auto-generated method stub
		
	}
	
}

class StringDataAapter extends BaseDataAdapter{

	StringBuffer sb;
	public StringDataAapter() {
		setStartFlag("<String>".toCharArray());
		setEndFlag("</String>".toCharArray());
		sb = new StringBuffer();
	}
	
	public StringDataAapter(String startFlag,String endFlag) {
		setStartFlag(startFlag.toCharArray());
		setEndFlag(endFlag.toCharArray());
		sb = new StringBuffer();
	}
	
	@Override
	public void execute(char[] ac) {
		sb.append(ac);
	}

	@Override
	public void complete(BufferedReader br) {
		System.out.println("StringDataAapter获取到数据：" + sb.toString());
		sb.delete(0, sb.length());
	}
}

class FileDataAapter extends BaseDataAdapter{

	File file;
	String folderPath;
	FileWriter fw;
	public FileDataAapter(String folderPath) {
		setStartFlag("<File>".toCharArray());
		setEndFlag("</File>".toCharArray());
		this.folderPath = folderPath;
		init();
	}
	
	private void init(){
		try {
			file = new File(folderPath + File.separator + UUID.randomUUID() +".txt");
			if(file.exists())file.delete();
			file.createNewFile();
			fw = new FileWriter(file);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public void execute(char[] ac) {
		try {
			fw.write(ac);
			fw.flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void complete(BufferedReader br) {
		System.out.println("文件接收完毕，文件路径:" + file.getAbsolutePath());
		if(fw!=null){
			try {
				fw.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		init();
	}
	
}